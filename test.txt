#include 
void bubble(int array[],int size)
{
    int i,j,temp;
    for(i=1;i<size;i++)
    {
        for(j=0;j<size-i;j++)
        {
            if(array[j]>array[j+1])
            {
                temp=array[j+1];
                array[j+1]=array[j];
                array[j]=temp;
            }   
        }       
    }
}

int main(int argc) {
    int dizi[]={9,4,6,2,8,1};
   
    bubble(dizi,6);
   
}
Yer Karmaşıklığı: 4n 4n  20
BİG-O Notasyonu: O(n)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(nn)










//    TEST 2





#include 

void insertion(int array[],int size)
{
   
    int i,j,temp;
   
    for(i=0;i<size;i++)
    {
        for(j=0;j<i;j++)
        {
            if(array[j]>array[i])
            {
                temp=array[i];
                array[i]=array[j];
                array[j]=temp;
            }
        }       
    }
         
}

int main(int argc, ) {
    int dizi[]={9,4,6,2,8,1};

    insertion(dizi,6);
    return 0;
}
Yer Karmaşıklığı: 4n 4n  20
BİG-O Notasyonu: O(n)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(nn)





//    TEST 3




#include 

void selection(int array[],int size)
{
    int i,j,temp,min;
   
    for(i=0;i<size-1;i++)
    {
        min=i;
        for(j=i+1;j<size;j++)
        {       
            if(array[j]<array[min])
                min=j;
        }   
        temp=array[i];
        array[i]=array[min];
        array[min]=temp;
    }
   
  
}
int main(int argc) {
    int dizi[]={9,4,6,2,8,1};
   
    
    selection(dizi,6);
    
}

Yer Karmaşıklığı: 4n 4n  24
BİG-O Notasyonu: O(n)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(nn)




//    TEST 4




 #include<stdio.h>
 int main()
 {
     int a=0, b=1, num, c;

     printf("Enter number of terms: ");
     scanf("%d",&num);

     for(int i=0; i<num; i++)
     {
         printf("%d\t",a);
         c = a + b; //next term
         a = b;
         b = c;
     }

     return 0;
 }
Yer Karmaşıklığı:  20
BİG-O Notasyonu: O(1)

Zaman karmaşıklığı;
BİG-O Notasyonu: O(n)








//    TEST 5


#include <stdio.h>
int main(){
   int number, i = 0, Next, first = 0, second = 1;
   while(i < number){
      if(i <= 1){
         Next = i;
      }
      else{
         Next = first + second;
         first = second;
         second = Next;
      }
      i++;
   }
   return 0;
}
Yer Karmaşıklığı:  20
BİG-O Notasyonu: O(1)

Zaman karmaşıklığı;
BİG-O Notasyonu: O(n)





//    TEST 6


#include <stdio.h>
int main(){
	int i,j;
	int sum = 0;
	int n=10;
	int arr[n][n];
	for (i=0;i<n;i++){
		for (j=0;j<n;j++){
		    arr[i][j]=i*j;
			sum = sum + arr[i][j];
		}
	}
        printf("%d", sum);	
        return 0;
        
}
Yer Karmaşıklığı: 4nn  16
BİG-O Notasyonu: O(nn)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(nn)





//    TEST 7




#include <stdio.h>
#include <stdlib.h>
int main()
{
    int count=10,i,n=10;
    int arr[n];
    i=1;
    do{
        arr[i]=i*count;
        printf("%d * %d = %d\n",i,count,i*count);
        i++;
    }while(i<=n);
    return 0;
}
 Yer Karmaşıklığı: 4n  12
BİG-O Notasyonu: O(n)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(n)




//    TEST 8

#include <stdio.h>
int factorial (int n) {    
    if (n <= 1) 
        return 1 ;
    else
        return n * factorial(n-1);
}
int main(){
    int sonuc,n=6;
    sonuc=factorial(n);
    printf("%d", sonuc);	
    return 0;
        
}
Yer Karmaşıklığı: n  8
BİG-O Notasyonu: O(n)
Zaman Karmaşıklığı;
BİG-O Notasyonu: O(n)


//    TEST 9



include <stdio.h>
int main() {
  double number, sum = 0;
int i;
  do {
   
   number++;
   while(i<24)
    {
 
    i*=2;
     }
  }while(number != 0.0);

 

  return 0;
}Yer Karmaşıklığı:  20
BİG-O Notasyonu: O(1)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(nlogN)




//  TEST 10




include <stdio.h>
int main() {
  double number, sum = 0;
int i;
  
   while(i<24)
    {    i*=2;
		
		while(number== 0.0){

      

         number++;
 
         }
	}
  return 0;
}
Yer Karmaşıklığı:  20
BİG-O Notasyonu: O(1)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(logNn)





//        TEST 11


#include<stdio.h>

include
int binarySearch(int array[], int x, int low, int high) {
  while (low <= high) {
    int mid = low + (high - low) / 2;

    if (array[mid] == x)
      return mid;

    if (array[mid] < x)
      low = mid + 1;

    else
      high = mid - 1;
  }

  return -1;
}
Yer Karmaşıklığı: 4n  16
BİG-O Notasyonu: O(n)
Zaman karmaşıklığı;
BİG-O Notasyonu: O(n)